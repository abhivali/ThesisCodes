"""
deck.timestep[t].contact.surfSurf.getIds()
C:\.......\anaconda3\lib\site-packages\edempy\timestep\sscontact.py
02/03/2022 at 13:55
	- edited getIds() method for randomly arranged particles
	- Original method exists in the comments and can be changed
Modifications can be implemented in the original getids method:
"""
    def getIds(self):
        """Returns 2D numpy.ndarray of id pairs for particles that are in contact with each other."""
        numParticlesbyType = []
        numSpheres = []
        keys = [] ################ added by Abhilash on 02/03/2022 at 13:55 #################
        # Open h5 file
        f = h5py.File(self.__fname, 'r')

        # Read num particles by type
        for key in f[self.__particlePath].keys():
            keys.append(str(key))########### added by Abhilash on 02/03/2022 at 13:55 #################
            numParticlesbyType.append(int(f[self.__particlePath][str(key)].attrs["size"]))
            # Get number of constituent spheres per particle type
            numSpheres.append(int(len(f[self.__particlePath][str(key)]['spheres'])))

        # Generate empty lookup table
        pIDs = numpy.full(
            [max(numParticlesbyType), len(numParticlesbyType)], numpy.NaN)

        # =============================================================================
        # # original method # remove the bottom loop and add this in case of errors
        # # Read particle IDs for timestep
        # for p in range(len(numParticlesbyType)):
        #     if numParticlesbyType[p] > 0:
        #          pIDs[:numParticlesbyType[p], p] = f[self.__particlePath][str(p)]["ids"]
        # =============================================================================
        # Read particle IDs for timestep // edited by Abhilash for randomly arranged particles
        # =============================================================================
        for idx, p in enumerate(keys):
            if numParticlesbyType[int(idx)] > 0:
                pIDs[:numParticlesbyType[int(idx)], int(p)] = f[self.__particlePath][str(p)]["ids"]
        # =============================================================================
        # Close hdf5 file
        f.close()

        contacts = self.getContacts()
    
        particle_spheres = numpy.tile(numSpheres, [contacts.shape[0], 1])

        # take() is quicker than choose()
        numSpheres1 = numpy.take(particle_spheres, contacts[:, 0])
        numSpheres2 = numpy.take(particle_spheres, contacts[:, 2])

        indexNumber1 = (contacts[:, 1] - (contacts[:, 1] % numSpheres1)) / numSpheres1
        indexNumber2 = (contacts[:, 3] - (contacts[:, 3] % numSpheres2)) / numSpheres2
        indexNumber1 = indexNumber1.astype(int)
        indexNumber2 = indexNumber2.astype(int)

        idPairs = [pIDs[indexNumber1, contacts[:, 0]],
                   pIDs[indexNumber2, contacts[:, 2]]]

        return numpy.transpose(numpy.array(idPairs)).astype(int)
